input {
  udp {
    port => 514
    type => "cisco_syslog"
  }
}

filter {
  # 1차: 시퀀스 번호 포함 패턴 (기본 시도)
  grok {
    match => { "message" => "<%{POSINT:syslog_pri}>%{INT:sequence_num}: %{DATA:device_host}: %{CISCOTIMESTAMP:log_timestamp} %{WORD:timezone}: %{GREEDYDATA:raw_message}" }
    tag_on_failure => ["pattern_1_fail"]
  }

  # 2차: 시퀀스 번호 제외 패턴 (대체 시도)
  if "pattern_1_fail" in [tags] {
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{DATA:device_host}: %{CISCOTIMESTAMP:log_timestamp} %{WORD:timezone}: %{GREEDYDATA:raw_message}" }
      remove_tag => ["pattern_1_fail"]
      tag_on_failure => ["pattern_2_fail"]
    }
  }

  if "pattern_2_fail" in [tags] {
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{DATA:device_host}: %{YEAR:year} %{MONTH:month} %{MONTHDAY:day} %{TIME:time} %{WORD:timezone}: %{GREEDYDATA:raw_message}" }
      remove_tag => ["pattern_2_fail"]
      tag_on_failure => ["pattern_3_fail"]
    }

    # 비정상 포맷 → 정상 포맷으로 변환 (May 2025 13:12:53)
    mutate {
      replace => {
        "log_timestamp" => "%{year}-%{month}-%{day} %{time}"  # "May 25 2025 13:12:53"
      }
      remove_field => ["year", "day", "month", "time"]
    }
  }

  # 시스코 메시지 구조 파싱
  grok {
    match => { "raw_message" => "%%{WORD:facility}-%{INT:severity}-%{WORD:mnemonic}: %{GREEDYDATA:event_message}" }
  }

  # 타임스탬프 처리 (KST)
  date {
    match => ["log_timestamp", "MMM dd yyyy HH:mm:ss.SSS", "MMM dd yyyy HH:mm:ss", "MMM d HH:mm:ss", "MMM dd HH:mm:ss"]
    timezone => "Asia/Seoul"
    target => "@timestamp_kst"
  }

  # 사용자/IP 정보 추출
  grok {
    match => { 
      "event_message" => [
        "User %{WORD:username} has exited tty session %{INT:tty_id}\(%{IP:source_ip}\)",
        "User %{WORD:username} logged out from %{IP:source_ip}"
      ]
    }
  }

  mutate {
    convert => { "[severity]" => "string" }
  }

  # 2. translate 필터 적용 (대괄호 표기법 사용)
  translate {
    field => "[severity]"
    destination => "[severity_label]"
    exact => true
    dictionary => {
      "0" => "Emergency"
      "1" => "Alert"
      "2" => "Critical"
      "3" => "Error"
      "4" => "Warning"
      "5" => "Notice"
      "6" => "Informational"
      "7" => "Debug"
    }
    fallback => "Unknown" 
    override => true
  }

  # 3. 필요시 다시 integer로 변환
  mutate {
    convert => {
      "[severity]" => "integer"
#      "[container_keyword]" => "false"
    }
  }

#  ruby {
#    code => '
#      ts = event.get("@timestamp_kst")
#      if ts
#        kst_time = ts.time.getlocal("+09:00").strftime("%Y-%m-%d %H:%M:%S")
#        event.set("__custom_paylod", {
#          "device" => event.get("device_host"),
#          "severity" => event.get("severity_label"),
#          "message" => event.get("event_message"),
#          "timestamp_trans" => kst_time,
#          "host_ip" => event.get("[host][ip]")
#        }.to_json)
#      else
#        event.tag("timestamp_missing")
#      end
#   '
#  }

  # 키워드 검증을 위한 필드추가 (웹훅용)
  ruby {
    code => '
      message = (event.get("event_message") || "").downcase
      keywords = ["fail", "down", "up", "power", "kernel"]
      event.set("contains_keyword", keywords.any? { |kw| message.include?(kw) })
    '
  }

  mutate {
    replace => {
      "[container_keyword]" => "false"
    }
  }

  # 불필요 필드 제거
  mutate {
    remove_field => ["raw_message", "timezone"]
  }  
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "cisco-syslog-%{+YYYY.MM.dd}"
  }

  # 추가: 웹훅 전송
  if ([severity] and [severity] <= 4) or ([contains_keyword]) {
    http {
      url => "http://172.25.32.200/api/logs"
      http_method => "post"
#      content_type => "application/json"
#      message => "%{__custom_payload}"
#      codec => json
      format => "json"
      mapping => {
        "device" => "%{device_host}"
        "severity" => "%{severity_label}"
        "message" => "%{event_message}"
        "timestamp_trans" => "%{log_timestamp}"
        "facility" => "%{facility}"
        "mnemonic" => "%{mnemonic}"
        "type" => "%{type}"
        "host_ip" => "%{[host][ip]}"
      }
      retry_failed => true
    }
  }

  if "pattern_3_fail" in [tags] {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }

#  stdout { codec => rubydebug }
}
